# Copyright 2011,2012,2016,2018,2019 Free Software Foundation, Inc.
#
# This file was generated by gr_modtool, a tool from the GNU Radio framework
# This file is a part of gr-ncjt
#
# SPDX-License-Identifier: GPL-3.0-or-later
#

########################################################################
# Setup library
########################################################################
include(GrPlatform) #define LIB_SUFFIX
set(CMAKE_POSITION_INDEPENDENT_CODE ON)
add_subdirectory(srsran_ldpc)
list(APPEND ncjt_sources
    rg_modes.cc
    hll/hll.cc
    burst_tx_impl.cc
    ofdm_mod_impl.cc
    ofdm_demod_impl.cc
    ltf_chanest_impl.cc
    qam_constellation.cc
    pkt_err_impl.cc
    rg_mapper_impl.cc
    rg_demapper_impl.cc
    ul_precoding_impl.cc
    mimo_detect_impl.cc
    utils.cc
    common.cc
    mu_chanest_impl.cc
    sic_detect_impl.cc
    stbc_encode_impl.cc
    stbc_decode_impl.cc
    stbc_sic_decode.cc
    mc_stbc_decode_impl.cc
    srsran_ldpc_encoder_impl.cc
    srsran_ldpc_decoder_impl.cc
    video_source_impl.cc
    video_sink_impl.cc
    rx_sync_impl.cc
    gnb_sync_impl.cc
    tx_frm_ctrl_impl.cc
    dual_tx_ctrl_impl.cc
    mapper_muxer_impl.cc
    ctrl.cc
    noair_impl.cc
    demapper_impl.cc
    remapper_muxer_impl.cc
    pdc_impl.cc
    skip_data_impl.cc
    csi_quantizer_impl.cc
    csi_fb_processing_impl.cc
    p1_precoding_impl.cc)

set(ncjt_sources
    "${ncjt_sources}"
    PARENT_SCOPE)
if(NOT ncjt_sources)
    message(STATUS "No C++ sources... skipping lib/")
    return()
endif(NOT ncjt_sources)

find_package (Eigen3 3.3 REQUIRED NO_MODULE)
find_package(OpenMP REQUIRED)  # Added OpenMP

add_library(gnuradio-ncjt SHARED ${ncjt_sources})

target_compile_definitions(gnuradio-ncjt
  PRIVATE
    EIGEN_NO_DEBUG    # disable runtime assertions
    EIGEN_NO_STATIC_ASSERT  # convert static asserts to runtime (optional)
)

target_link_libraries(gnuradio-ncjt PUBLIC
	gnuradio-filter
	gnuradio-fft
	gnuradio-fec
	Eigen3::Eigen)

target_link_libraries(gnuradio-ncjt PRIVATE
    srsran_channel_coding
    srsran_support
    OpenMP::OpenMP_CXX)

target_include_directories(
    gnuradio-ncjt
    PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/../include>
    PUBLIC $<INSTALL_INTERFACE:include>
    PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/srsran_ldpc/include/>
    PUBLIC $<INSTALL_INTERFACE:include>
    PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/srsran_ldpc/external>
    PUBLIC $<INSTALL_INTERFACE:include>)
set_target_properties(gnuradio-ncjt PROPERTIES DEFINE_SYMBOL "gnuradio_ncjt_EXPORTS")

if(APPLE)
    set_target_properties(gnuradio-ncjt PROPERTIES INSTALL_NAME_DIR
                                                    "${CMAKE_INSTALL_PREFIX}/lib")
endif(APPLE)

add_executable(ldpc_sandbox ldpc_sandbox.cc)
target_link_libraries(ldpc_sandbox
    srsran_channel_coding
    srsran_ldpc
    srsran_support
    )

target_include_directories(
    ldpc_sandbox
    PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/../include>
    PUBLIC $<INSTALL_INTERFACE:include>
    PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/srsran_ldpc/include/>
    PUBLIC $<INSTALL_INTERFACE:include>
    PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/srsran_ldpc/external>
    PUBLIC $<INSTALL_INTERFACE:include>)

add_executable(ctrl_polar_sandbox ctrl_polar_sandbox.cc ctrl.cc qam_constellation.cc common.cc)
target_link_libraries(ctrl_polar_sandbox
    gnuradio-ncjt
    srsran_channel_coding
    srsran_ldpc
    srsran_support
    fmt::fmt
)

target_include_directories(
    ctrl_polar_sandbox
    PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/../include>
    PUBLIC $<INSTALL_INTERFACE:include>
    PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/srsran_ldpc/include/>
    PUBLIC $<INSTALL_INTERFACE:include>
    PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/srsran_ldpc/external>
    PUBLIC $<INSTALL_INTERFACE:include>)

add_executable(hll_sandbox hll_sandbox.cc hll/hll.cc qam_constellation.cc)
target_link_libraries(hll_sandbox
    gnuradio-ncjt
    OpenMP::OpenMP_CXX
    fmt::fmt
)

target_include_directories(
    hll_sandbox
    PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/../include>
    PUBLIC $<INSTALL_INTERFACE:include>
    PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/srsran_ldpc/include/>
    PUBLIC $<INSTALL_INTERFACE:include>
    PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/srsran_ldpc/external>
    PUBLIC $<INSTALL_INTERFACE:include>)

add_executable(differential_quantization_sandbox differential_quantization_sandbox.cc)
target_link_libraries(differential_quantization_sandbox
    gnuradio-ncjt
)

target_include_directories(
    differential_quantization_sandbox
    PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/../include>
    PUBLIC $<INSTALL_INTERFACE:include>)

########################################################################
# Install built library files
########################################################################
include(GrMiscUtils)
gr_library_foo(srsran_channel_coding)
gr_library_foo(log_likelihood_ratio)
gr_library_foo(srsran_support)
gr_library_foo(srsran_crc_calculator)
gr_library_foo(srsran_ldpc)
gr_library_foo(srsvec)
gr_library_foo(gnuradio-ncjt)

########################################################################
# Print summary
########################################################################
message(STATUS "Using install prefix: ${CMAKE_INSTALL_PREFIX}")
message(STATUS "Building for version: ${VERSION} / ${LIBVER}")

########################################################################
# Build and register unit test
########################################################################
include(GrTest)

# If your unit tests require special include paths, add them here
#include_directories()
# List all files that contain Boost.UTF unit tests here

list(APPEND test_ncjt_sources
)
# Anything we need to link to for the unit tests go here
list(APPEND GR_TEST_TARGET_DEPS gnuradio-ncjt)

if(NOT test_ncjt_sources)
    message(STATUS "No C++ unit tests... skipping")
    return()
endif(NOT test_ncjt_sources)

foreach(qa_file ${test_ncjt_sources})
    gr_add_cpp_test("ncjt_${qa_file}" ${CMAKE_CURRENT_SOURCE_DIR}/${qa_file})
endforeach(qa_file)
